<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapper.xml映射文件中定义了操作数据库的sql，每个sql是一个statement， 映射文件是mybatis的核心。 -->
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址 -->
<mapper namespace="com.luowg.person.mapper.PersonMapper">

	<select id="findCount" parameterType="com.luowg.person.po.Person"
		resultType="long">
		select count(*) from person
		<where>
			<if test="username!= null and username!= ''">
				username like '%${username}%'
			</if>
			<if test="startTime!= null and startTime!= ''">
				and joinTime >= '${startTime}'
			</if>
			<if test="startTime!= null and startTime!= ''">
				and '${endTime}' > joinTime
			</if>
		</where>
	</select>
	<select id="findDataTables" resultType="com.luowg.person.po.Person"
		parameterType="hashmap">
		select * from person
		<where>
			<if test="person.username!= null and person.username!= ''">
				username like '%${person.username}%'
			</if>
			<if test="person.startTime!= null and person.startTime!= ''">
				and joinTime >= '${person.startTime}'
			</if>
			<if test="person.startTime!= null and person.startTime!= ''">
				and '${person.endTime}' > joinTime
			</if>
	      </where>
		 limit #{dataTablesInput.start},#{dataTablesInput.length} 
	</select>
	<select id="getById" resultType="com.luowg.person.po.Person"
		parameterType="string">
		select * from person where id= #{value}
	</select>

	<insert id="save" parameterType="com.luowg.person.po.Person">
		insert into person values(
		#{id},
		#{username},
		#{sex},
		#{phone},
		#{email},
		#{adress},
		#{joinTime},
		#{level},
		#{status})
	</insert>
	<update id="update" parameterType="com.luowg.person.po.Person">
		update person
		<set>
			<if test="username!=null"> username=#{username,jdbcType=VARCHAR},</if>
			<if test="sex!=null ">sex=#{sex,jdbcType=VARCHAR},</if>
			<if test="phone!=null ">phone=#{phone,jdbcType=VARCHAR},</if>
			<if test="email!=null">email=#{email,jdbcType=VARCHAR},</if>
			<if test="adress!=null ">adress=#{adress,jdbcType=VARCHAR},</if>
			<if test="joinTime!=null">joinTime=#{joinTime,javaType=DATE, jdbcType=VARCHAR},
			</if>
			<if test="level!=null">level=#{level,jdbcType=VARCHAR},</if>
			<if test="status!=null">status=#{status,jdbcType=VARCHAR},</if>
		</set>
		where id=#{id,jdbcType=VARCHAR}
	</update>
	<delete id="delete" parameterType="string">
		delete from person where id=#{id}
	</delete>
</mapper>


