<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.luowg"></context:component-scan>
	<!-- 配置数据源 -->
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:resource/db/db.properties"/>
	<!-- 配置连接池数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- Mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:resource/mybatis/SqlMapConfig.xml" />
		<!-- 加载映射文件 -->
		<property name="mapperLocations" value="classpath:com/luowg/*/mapper/*.xml" />
		<!-- 批量别名定义 指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）,可惜不支持通配符-->
		<!-- <property name="typeAliasesPackage" value="com.luowg.*.po"></property> -->
	</bean>
	<!-- 配置扫描器   扫描 所有映射接口类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.luowg.*.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

	<!--=====================配置事务======================-->
	
	<!-- 配置 Spring 的声明式事务 -->
	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 2. 配置事务属性, 需要事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager" >
		<tx:attributes >
			<!-- propagation :事务传播行为
				  isolation :事务隔离级别 
			 -->
			 <!-- REQUIRED 这种事务传播行为是默认的,当一个事务方法运行调用另一个事务方法时
			   		被调的那个方法将加入到调用方法的事务中
			      REQUIRES_NEW 注意，这种事务传播行为, 会新起一个事务,而原调它的方法的事务会挂起
					容易发生违反数据原子性的问题
			   
			   no-rollback-for 指定哪些异常不会滚
			   rollback-for 将被触发进行回滚的 Exception(s)；以逗号分开。 
			   read-only 该事务是否只读？默认false
			   timeout 指定事务运行时间,以秒为单位，如果指定时间之前没执行完，强制回滚  默认-1
		 	-->
		   <tx:method name="get*" read-only="true"  propagation="REQUIRED" no-rollback-for="" />
		   <tx:method name="find*" read-only="true"  propagation="REQUIRED" rollback-for="" />
		   <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT"/>
           <tx:method name="delete*" propagation="REQUIRED"/>
           <tx:method name="update*" propagation="REQUIRED"/>
           <!-- rollback-for : 异常导致回滚 -->
		    <tx:method name="*" rollback-for="java.lang.Throwable" timeout="10"/>
		    
		</tx:attributes >
	</tx:advice>

	<!-- 3. 配置事务切点, 并把切点和事务属性关联起来 -->
	<aop:config>
		<!-- execution(* com.luowg.*.service.*.*(..))  匹配包下，任意返回值，任意方法名，任意方法参数 -->
		<aop:pointcut expression="execution(* com.luowg.*.service.*.*(..))" 
			id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>

</beans>
